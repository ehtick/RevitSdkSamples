<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Lab2_1_Elements Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Labs" /><meta name="file" content="b44937f6-f251-20ca-1b9e-525459171c06" /><meta name="guid" content="b44937f6-f251-20ca-1b9e-525459171c06" /><xml><MSHelp:Attr Name="AssetID" Value="T:Labs.Lab2_1_Elements" /><MSHelp:TOCTitle Title="Lab2_1_Elements Class" /><MSHelp:RLTitle Title="Lab2_1_Elements Class (Labs)" /><MSHelp:Keyword Index="A" Term="T:Labs.Lab2_1_Elements" /><MSHelp:Keyword Index="A" Term="frlrfLabsLab2_1_ElementsClassTopic" /><MSHelp:Keyword Index="K" Term="Lab2_1_Elements class" /><MSHelp:Keyword Index="K" Term="Labs.Lab2_1_Elements class" /><MSHelp:Keyword Index="K" Term="Lab2_1_Elements class, about Lab2_1_Elements class" /><MSHelp:Keyword Index="F" Term="Lab2_1_Elements" /><MSHelp:Keyword Index="F" Term="Labs.Lab2_1_Elements" /><MSHelp:Attr Name="HelpPriority" Value="2" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="labs.dll" /><MSHelp:Attr Name="APIName" Value="Labs.Lab2_1_Elements" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="DevLang" Value="C++" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="List all document elements. This is not recommended for normal use! The main contents of a Revit project database is its elements collection. This includes both building elements representing physical objects as well as s ..." /><MSHelp:Attr Name="AssemblyVersion" Value="3.0.0.1" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"></script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit API Introduction Labs</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Lab2_1_Elements Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="56b94c91-d186-e603-7b9d-9eb94ee787ae.htm">Members</a>  <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a>  
  <span id="headfeedbackarea" class="feedbackhead">
      <a href="javascript:SubmitFeedback('','Revit API Introduction Labs','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">
        
        Send Feedback
      </a>
	</span>
</td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"> </span><div class="summary">
 List all document elements.
 This is not recommended for normal use!
 <p>
      The main contents of a Revit project database is its elements collection.
      This includes both building elements representing physical objects as well as
      supporting elements such as various internal definitions, families and types,
      which are not part of the visible building model.
    </p><p>
      In this lab, we explore the collection of all Revit document elements
      and implement a second external command class Lab2_1_Elements derived
      from IExternalCommand in the Labs2 module. Since we do nothing to modify
      the database, we set this command's transaction mode to read-only.
    </p><p>
      Since the output will be much too large for a message box,
      we will redirect it to a text file.
    </p><p>
      The exercise version of the Labs2 module already references the additional
      required namespaces such as System.IO, and the class LabConstants defines string
      constants for the output filename and directory:
    </p><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre><span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> _temp_dir = <span class="highlight-literal">"C:/tmp/"</span>;
<span class="highlight-keyword">public</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> FilePath = _temp_dir + <span class="highlight-literal">"RevitElements.txt"</span>;</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> _temp_dir <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"C:/tmp/"</span>
<span class="highlight-keyword">Public</span> FilePath <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = _temp_dir + <span class="highlight-literal">"RevitElements.txt"</span></pre></div></span><p>
      Returning to the Lab2_1_Elements command, start by accessing
      the current Revit document to read elements from and opening the
      output file to write to:
    </p><span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre>UIApplication app = commandData.Application;
Document doc = app.ActiveUIDocument.Document;

<span class="highlight-comment">// .NET exception handling should be done everywhere,</span>
<span class="highlight-comment">// but will sometimes be omitted for clarity in the</span>
<span class="highlight-comment">// following labs unless we expect exceptions:</span>

StreamWriter sw;

<span class="highlight-keyword">try</span>
{
  sw = <span class="highlight-keyword">new</span> StreamWriter( LabConstants.FilePath );
}
<span class="highlight-keyword">catch</span>( Exception e )
{
  LabUtils.ErrorMsg( <span class="highlight-keyword">string</span>.Format( <span class="highlight-literal">"Cannot open '{0}': {1}"</span>,
    LabConstants.FilePath, e.Message ) );
  <span class="highlight-keyword">return</span> Result.Failed;
}</pre></div></span><span id="cbc_4" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre><span class="highlight-keyword">Dim</span> app <span class="highlight-keyword">As</span> UIApplication = commandData.Application
<span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = app.ActiveUIDocument.Document

<span class="highlight-comment">' Typical .NET error checking (should be done everywhere,</span>
<span class="highlight-comment">' but will be omitted for clarity in some of the following</span>
<span class="highlight-comment">' labs unless we expect exceptions):</span>


<span class="highlight-keyword">Dim</span> sw <span class="highlight-keyword">As</span> StreamWriter

<span class="highlight-keyword">Try</span>
    sw = <span class="highlight-keyword">New</span> StreamWriter(LabConstants.FilePath)
<span class="highlight-keyword">Catch</span> e <span class="highlight-keyword">As</span> Exception
    LabUtils.ErrorMsg(<span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Cannot open '{0}': {1}"</span>, _
                                    LabConstants.FilePath, e.Message))
    <span class="highlight-keyword">Return</span> Result.Failed
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span></pre></div></span><p>
      In Revit 2011, we no longer have direct access to the entire unfiltered
      Revit elements collection, because generally the Revit API does not expect
      an application to ever need to iterate over all elements. To retrieve them
      all anyway, we need to use a trick: ask for all elements fulfilling a specific
      criterion and unite them with all elements NOT fulfilling the same
      criterion:
    </p><span id="cbc_5" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre><span class="highlight-comment">// the Revit API does not expect an application</span>
<span class="highlight-comment">// ever to need to iterate over all elements.</span>
<span class="highlight-comment">// To do so, we need to use a trick: ask for all</span>
<span class="highlight-comment">// elements fulfilling a specific criteria and</span>
<span class="highlight-comment">// unite them with all elements NOT fulfilling</span>
<span class="highlight-comment">// the same criteria:</span>

FilteredElementCollector collector
  = <span class="highlight-keyword">new</span> FilteredElementCollector( doc )
    .WhereElementIsElementType();

FilteredElementCollector collector2
  = <span class="highlight-keyword">new</span> FilteredElementCollector( doc )
    .WhereElementIsNotElementType();

collector.UnionWith( collector2 );</pre></div></span><span id="cbc_6" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre><span class="highlight-comment">' the Revit API does not expect an application</span>
<span class="highlight-comment">' to ever need to iterate over all elements.</span>
<span class="highlight-comment">' To do so, we need to use a trick: ask for all</span>
<span class="highlight-comment">' elements fulfilling a specific criteria and</span>
<span class="highlight-comment">' unite them with all elements NOT fulfilling</span>
<span class="highlight-comment">' the same criteria:</span>


<span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> FilteredElementCollector _
    = <span class="highlight-keyword">New</span> FilteredElementCollector(doc) _
        .WhereElementIsElementType()

<span class="highlight-keyword">Dim</span> collector2 <span class="highlight-keyword">As</span> FilteredElementCollector = _
    <span class="highlight-keyword">New</span> FilteredElementCollector(doc) _
        .WhereElementIsNotElementType()

collector.UnionWith(collector2)</pre></div></span><p>
      Loop over the returned elements, list some of the generic
      identification properties to the output file, and close it when
      done:
    </p><span id="cbc_7" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre><span class="highlight-keyword">string</span> s, line;

<span class="highlight-keyword">foreach</span>( Element e <span class="highlight-keyword">in</span> collector )
{
  line = <span class="highlight-literal">"Id="</span> + e.Id.IntegerValue.ToString(); <span class="highlight-comment">// element id</span>
  line += <span class="highlight-literal">"; Class="</span> + e.GetType().Name; <span class="highlight-comment">// element class, i.e. System.Type</span>

  <span class="highlight-comment">// The element category is not implemented for all classes,</span>
  <span class="highlight-comment">// and may return null; for Family elements, one can sometimes</span>
  <span class="highlight-comment">// use the FamilyCategory property instead.</span>

  s = <span class="highlight-keyword">string</span>.Empty;

  <span class="highlight-keyword">if</span>( <span class="highlight-keyword">null</span> != e.Category )
  {
    s = e.Category.Name;
  }
  <span class="highlight-keyword">if</span>( <span class="highlight-number">0</span> == s.Length &amp;&amp; e <span class="highlight-keyword">is</span> Family &amp;&amp; <span class="highlight-keyword">null</span> != ((Family) e).FamilyCategory )
  {
    s = ((Family) e).FamilyCategory.Name;
  }
  <span class="highlight-keyword">if</span>( <span class="highlight-number">0</span> == s.Length )
  {
    s = <span class="highlight-literal">"?"</span>;
  }
  line += <span class="highlight-literal">"; Category="</span> + s;

  <span class="highlight-comment">// The element Name has a different meaning for different classes,</span>
  <span class="highlight-comment">// but is mostly implemented "logically". More precise info on elements</span>
  <span class="highlight-comment">// can be obtained in class-specific ways.</span>

  line += <span class="highlight-literal">"; Name="</span> + e.Name;
  line += <span class="highlight-literal">"; UniqueId="</span> + e.UniqueId;
  <span class="highlight-comment">//line += "; Guid=" + GetGuid( e.UniqueId );</span>
  sw.WriteLine( line );
}
sw.Close();

LabUtils.InfoMsg( <span class="highlight-literal">"Element list has been written to "</span>
  + LabConstants.FilePath + <span class="highlight-literal">"."</span> );</pre></div></span><span id="cbc_8" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre><span class="highlight-keyword">Dim</span> s <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>, line <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>

<span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collector
    line = <span class="highlight-literal">"Id="</span> + e.Id.IntegerValue.ToString()
    <span class="highlight-comment">' element id</span>
    line += <span class="highlight-literal">"; Class="</span> + e.[<span class="highlight-keyword">GetType</span>]().Name
    <span class="highlight-comment">' element class, i.e. System.Type</span>
    <span class="highlight-comment">' The element category is not implemented for all classes,</span>
    <span class="highlight-comment">' and may return null; for Family elements, one can sometimes</span>
    <span class="highlight-comment">' use the FamilyCategory property instead.</span>


    s = <span class="highlight-keyword">String</span>.Empty

    <span class="highlight-keyword">If</span> e.Category <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        s = e.Category.Name
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">If</span> <span class="highlight-number">0</span> = s.Length <span class="highlight-keyword">AndAlso</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> Family <span class="highlight-keyword">AndAlso</span> <span class="highlight-keyword">DirectCast</span>(e, Family).FamilyCategory <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        s = <span class="highlight-keyword">DirectCast</span>(e, Family).FamilyCategory.Name
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">If</span> <span class="highlight-number">0</span> = s.Length <span class="highlight-keyword">Then</span>
        s = <span class="highlight-literal">"?"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    line += <span class="highlight-literal">"; Category="</span> + s

    <span class="highlight-comment">' The element Name has a different meaning for different classes,</span>
    <span class="highlight-comment">' but is mostly implemented "logically". More precise info on elements</span>
    <span class="highlight-comment">' can be obtained in class-specific ways.</span>


    line += <span class="highlight-literal">"; Name="</span> + e.Name
    line += <span class="highlight-literal">"; UniqueId="</span> + e.UniqueId
    <span class="highlight-comment">'line += "; Guid=" + GetGuid( e.UniqueId );</span>
    sw.WriteLine(line)
<span class="highlight-keyword">Next</span>

sw.Close()

LabUtils.InfoMsg(<span class="highlight-literal">"Element list has been written to "</span> _
                 + LabConstants.FilePath + <span class="highlight-literal">"."</span>)</pre></div></span><p>
      The Execute method can safely return a Failed result code,
      since the database has not been modified. This aboorts the automatic
      transaction that was created by the Revit API due to the automatic
      transaction mode attribute setting.
    </p><p>
      Compile and link the project and update the add-in manifest
      file accordingly, as descibed for lab 1-2. Or load and run the
      command with the help of the Add-in Manager, if you prefer.
    </p><p>
      Run the command and examine and discuss the contents of the
      created output file with the course instructor and your peers.
    </p><p>
      Save the first output file under a different name, add a
      couple of new elements to the Revit model, run the command again
      to generate a new output file, and compare the two.
    </p></div><p />
    <b>Namespace:</b> 
   <a href="715b3539-b2e6-3295-58e6-1481eea1cf44.htm">Labs</a><br />
    <b>Assembly:</b>
   <span sdata="assembly">labs</span> (in labs.dll) Version: 3.0.0.1 (3.0.0.1)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Lab2_1_Elements</span> : <span class="nolink">IExternalCommand</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic (Declaration)</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Lab2_1_Elements</span> _
	<span class="keyword">Implements</span> <span class="nolink">IExternalCommand</span></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Lab2_1_Elements</span> : <span class="nolink">IExternalCommand</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</a><br />  <span class="selflink">Labs<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Lab2_1_Elements</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="56b94c91-d186-e603-7b9d-9eb94ee787ae.htm">Lab2_1_Elements Members</a></div><div class="seeAlsoStyle"><a href="715b3539-b2e6-3295-58e6-1481eea1cf44.htm">Labs Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"> </span>
 <p /><a href="Copyright (C) 2010 Jeremy Tammik, Autodesk Inc." target="_blank">Copyright (C) 2010 Jeremy Tammik, Autodesk Inc.</a></div></div></body></html>