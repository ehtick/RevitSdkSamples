<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Lab2_2_ModelElements Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Labs" /><meta name="file" content="5cc9fba4-96cc-8ac3-1f24-cd79267d2824" /><meta name="guid" content="5cc9fba4-96cc-8ac3-1f24-cd79267d2824" /><xml><MSHelp:Attr Name="AssetID" Value="T:Labs.Lab2_2_ModelElements" /><MSHelp:TOCTitle Title="Lab2_2_ModelElements Class" /><MSHelp:RLTitle Title="Lab2_2_ModelElements Class (Labs)" /><MSHelp:Keyword Index="A" Term="T:Labs.Lab2_2_ModelElements" /><MSHelp:Keyword Index="A" Term="frlrfLabsLab2_2_ModelElementsClassTopic" /><MSHelp:Keyword Index="K" Term="Lab2_2_ModelElements class" /><MSHelp:Keyword Index="K" Term="Labs.Lab2_2_ModelElements class" /><MSHelp:Keyword Index="K" Term="Lab2_2_ModelElements class, about Lab2_2_ModelElements class" /><MSHelp:Keyword Index="F" Term="Lab2_2_ModelElements" /><MSHelp:Keyword Index="F" Term="Labs.Lab2_2_ModelElements" /><MSHelp:Attr Name="HelpPriority" Value="2" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="labs.dll" /><MSHelp:Attr Name="APIName" Value="Labs.Lab2_2_ModelElements" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="DevLang" Value="C++" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="List all model elements. Model elements are generally part of the building and have geometry. In this lab we will implement a filter to retrieve all model elements, i.e. Revit element instances with a 3D geometrical represe ..." /><MSHelp:Attr Name="AssemblyVersion" Value="3.0.0.1" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"></script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit API Introduction Labs</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Lab2_2_ModelElements Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="8a72b8c2-01c7-cb9b-2d89-f7129314f20f.htm">Members</a>  <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a>  
  <span id="headfeedbackarea" class="feedbackhead">
      <a href="javascript:SubmitFeedback('','Revit API Introduction Labs','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">
        
        Send Feedback
      </a>
	</span>
</td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"> </span><div class="summary">
 List all model elements.
 <p>
      Model elements are generally part of the building and have geometry.
      In this lab we will implement a filter to retrieve all model elements,
      i.e. Revit element instances with a 3D geometrical representation.
      There are several possible approaches to retrieving these elements.
      Here, we will present a method that
      uses a combination of different criteria to ensure that only valid
      model elements are selected. The criteria applied to each element are:
    </p><ul><li>It is not an ElementType object</li><li>It has a valid category</li><li>The category has material quantities</li></ul><p>To complete this lab, perform the following steps:</p><ol><li>Add a new read-only external command implementation named Lab2_2_ModelElements to the Labs2 module.</li><li>Implement code to access the Revit application and current document.</li><li>Instantiate a new FilteredElementCollector variable named collector.</li><li>Retrieve all elements that are not of type ElementType (hint: use WhereElementIsNotElementType).</li><li>Instantiate a variable named 'a' as a list of strings to collect the element information and later feed to the approriate LabUtils.InfoMsg overload.</li><li>Loop over the collected elements (hint: you can simply use foreach Element e in collector).</li><li>Ignore all elements with an invalid, i.e. null, category.</li><li>Ignore all elements whose category does not have material quantities, cf. the Category.HasMaterialQuantities property.</li><li>Populate 'a' with some element data such as category name, element name, and element id.</li><li>Display the contents of 'a' using the appropriate LabUtils.InfoMsg overload.</li><li>Return a Failed result code, since we did nothing to modify the database.</li></ol><p>Here is one possible implementation of these steps:</p><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre>UIApplication app = commandData.Application;
Document doc = app.ActiveUIDocument.Document;

FilteredElementCollector collector
  = <span class="highlight-keyword">new</span> FilteredElementCollector( doc )
    .WhereElementIsNotElementType();

List&lt;<span class="highlight-keyword">string</span>&gt; a = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">string</span>&gt;();

<span class="highlight-comment">// we could use a LINQ query here instead:</span>

<span class="highlight-keyword">foreach</span>( Element e <span class="highlight-keyword">in</span> collector )
{
  <span class="highlight-comment">//  &amp;&amp; null != e.Materials</span>
  <span class="highlight-comment">//  &amp;&amp; 0 &lt; e.Materials.Size</span>

  <span class="highlight-keyword">if</span>( <span class="highlight-keyword">null</span> != e.Category
    &amp;&amp; e.Category.HasMaterialQuantities )
  {
    a.Add( <span class="highlight-keyword">string</span>.Format(
      <span class="highlight-literal">"Category={0}; Name={1}; Id={2}"</span>,
      e.Category.Name, e.Name, e.Id.IntegerValue ) );
  }
}

LabUtils.InfoMsg( <span class="highlight-literal">"Project contains {0} model element{1}{2}"</span>, a );

<span class="highlight-keyword">return</span> Result.Failed;</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre><span class="highlight-keyword">Dim</span> app <span class="highlight-keyword">As</span> UIApplication = commandData.Application
<span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = app.ActiveUIDocument.Document

<span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> FilteredElementCollector _
    = <span class="highlight-keyword">New</span> FilteredElementCollector(doc) _
        .WhereElementIsNotElementType()

<span class="highlight-keyword">Dim</span> a <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">String</span>)()

<span class="highlight-comment">' we could use a LINQ query here instead:</span>


<span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collector
    <span class="highlight-comment">' &amp;&amp; null != e.Materials</span>
    <span class="highlight-comment">' &amp;&amp; 0 &lt; e.Materials.Size</span>


    <span class="highlight-keyword">If</span> e.Category <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> e.Category.HasMaterialQuantities <span class="highlight-keyword">Then</span>
        a.Add(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"Category={0}; Name={1}; Id={2}"</span>, _
                            e.Category.Name, e.Name, e.Id.IntegerValue))
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">Next</span>

LabUtils.InfoMsg(<span class="highlight-literal">"Project contains {0} model element{1}{2}"</span>, a)

<span class="highlight-keyword">Return</span> Result.Failed</pre></div></span><p>
      Compile, link and load the project as usual.
      Step through the code in the debugger and examine how many elements are
      eliminated by the various filtering steps.
    </p><p>
      A useful additional functionality would be to differentiate
      between visible and hidden elements.
    </p></div><p />
    <b>Namespace:</b> 
   <a href="715b3539-b2e6-3295-58e6-1481eea1cf44.htm">Labs</a><br />
    <b>Assembly:</b>
   <span sdata="assembly">labs</span> (in labs.dll) Version: 3.0.0.1 (3.0.0.1)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Lab2_2_ModelElements</span> : <span class="nolink">IExternalCommand</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic (Declaration)</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Lab2_2_ModelElements</span> _
	<span class="keyword">Implements</span> <span class="nolink">IExternalCommand</span></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Lab2_2_ModelElements</span> : <span class="nolink">IExternalCommand</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
        <p>A useful additional functionality would be to differentiate between visible and hidden elements.</p>
        <p>
        If you are just looking for Walls, Windows and Doors, I would use a filter
        that collects those items (LogicalOrFilter). If you are looking to exclude
        certain types, like GraphicsStyles and Views and Levels, you can do that
        also using LogicalAndFilters. You could also try the BoundingBox filters,
        I think those will skip elements like GraphicsStyles and Materials and
        Annotations which don’t have geometry, but not elements like Levels and Views.
        I would get the bounding box of a default 3D view, and use the bounding box
        filter which passes elements inside or intersecting it.
      </p>
      </div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</a><br />  <span class="selflink">Labs<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Lab2_2_ModelElements</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="8a72b8c2-01c7-cb9b-2d89-f7129314f20f.htm">Lab2_2_ModelElements Members</a></div><div class="seeAlsoStyle"><a href="715b3539-b2e6-3295-58e6-1481eea1cf44.htm">Labs Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"> </span>
 <p /><a href="Copyright (C) 2010 Jeremy Tammik, Autodesk Inc." target="_blank">Copyright (C) 2010 Jeremy Tammik, Autodesk Inc.</a></div></div></body></html>