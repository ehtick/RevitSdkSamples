#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CBoltstandardsctrl1 wrapper class
#include "unitsmanager.h"

class CBoltStandards : public CWnd
{
protected:
	DECLARE_DYNCREATE(CBoltStandards)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xC4B9CAC, 0xB571, 0x4906, { 0xB0, 0x6, 0x6, 0xFC, 0x98, 0x47, 0x37, 0x34 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    kEditBox = 0,
    kListBox = 1,
    kComboBox = 2,
    kCheckBox = 3,
    kProfileEdit = 4,
    kButton = 5
}ColumnType;
enum
{
    kUnits = 0,
    kDouble = 1,
    kInteger = 2,
    kString = 3
}ColumnDataType;
enum
{
    kUnitDistance = 0,
    kUnitAngle = 1,
    kUnitWeight = 2,
    kUnitDistanceGUI = 3,
    kUnitArea = 4,
    kUnitVolume = 5,
    kUnitForce = 6,
    kUnitMoment = 7
}ColumnUnitType;
enum
{
    kBeam = 1,
    kPlate = 2
}GroupingRole;
enum
{
    kGratingStandard = 0,
    kGratingVariable = 1
}GratingType;
enum
{
    kType = 0,
    kClass = 1,
    kSize = 2
}GratingControls;
enum
{
    kNull = 0,
    kAnglePage = 1,
    kAreaPage = 2,
    kWeightPage = 4,
    kLengthPage = 8,
    kWeightPerDistancePage = 16,
    kAllPages = 255
}FirstPage;


// Operations
public:

// _DBoltStandards

// Functions
//


// Properties
//

float GetLabelLength()
{
	float result;
	GetProperty(0x1, VT_R4, (void*)&result);
	return result;
}
void SetLabelLength(float propVal)
{
	SetProperty(0x1, VT_R4, propVal);
}
long GetLabelDiameter()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}
void SetLabelDiameter(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}
long GetLabelStandard()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}
void SetLabelStandard(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}
long GetLabelMaterial()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}
void SetLabelMaterial(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}
long GetLabelBoltSet()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}
void SetLabelBoltSet(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}
double GetBoltDiameter()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}
void SetBoltDiameter(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}
CString GetBoltStandard()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltStandard(CString propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}
CString GetBoltMaterial()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltMaterial(CString propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}
CString GetBoltSet()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltSet(CString propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}
short GetElementType()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}
void SetElementType(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}
CString GetBoltStandardDescription()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltStandardDescription(CString propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}
CString GetBoltMaterialDescription()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltMaterialDescription(CString propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}
CString GetBoltSetDescription()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltSetDescription(CString propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}
CString GetBoltDiameterDescription()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}
void SetBoltDiameterDescription(CString propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}
double GetAnchorLength()
{
	double result;
	GetProperty(0xf, VT_R8, (void*)&result);
	return result;
}
void SetAnchorLength(double propVal)
{
	SetProperty(0xf, VT_R8, propVal);
}
long GetLabelAnchorLength()
{
  long result;
  GetProperty(0x10, VT_I4, (void*)&result);
  return result;
}
void SetLabelAnchorLength(long propVal)
{
  SetProperty(0x10, VT_I4, propVal);
}

CUnitsManager GetUnits()
{
  LPDISPATCH pDispatch;
  GetProperty(0x11, VT_DISPATCH, (void*)&pDispatch);
  return CUnitsManager(pDispatch);
}

void SetUnits(LPDISPATCH propVal)
{
  SetProperty(0x11, VT_DISPATCH, propVal);
}
int GetControlHeight()
{
	int result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}
void SetControlHeight(int propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}
BOOL GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}
void SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}
IFontDisp * GetFont()
{
	IFontDisp * result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}
void SetFont(IFontDisp * propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}


};
