#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.
/////////////////////////////////////////////////////////////////////////////
// CAstWeldControl wrapper class

class CAstWeldControl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CAstWeldControl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xC90B8331, 0x9DA7, 0x41DD, { 0x8D, 0x66, 0x1E, 0xA9, 0x45, 0xC3, 0x36, 0x21 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    kEditBox = 0,
    kListBox = 1,
    kComboBox = 2,
    kCheckBox = 3,
    kProfileEdit = 4,
    kButton = 5
}eColumnType;
enum
{
    kUnits = 0,
    kDouble = 1,
    kInteger = 2,
    kString = 3
}eColumnDataType;
enum
{
    kUnitDistance = 0,
    kUnitAngle = 1,
    kUnitWeight = 2,
    kUnitDistanceGUI = 3,
    kUnitArea = 4,
    kUnitVolume = 5,
    kUnitForce = 6,
    kUnitMoment = 7
}eColumnUnitType;
enum
{
    kBeam = 1,
    kPlate = 2
}eGroupingRole;
enum
{
    kNull = 0,
    kAnglePage = 1,
    kAreaPage = 2,
    kWeightPage = 4,
    kLengthPage = 8,
    kWeightPerDistancePage = 16,
    kAllPages = 255
}eFirstPage;


// Operations
public:

// _DAstWeldControl

// Functions
//

	void SelectItemByKey(long Key)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Key);
	}
	long getSelectedItemKey()
	{
		long result;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL IsCombiWelding()
	{
		BOOL result;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}

// Properties
//

long GetLabelDbKey()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}
void SetLabelDbKey(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}
long GetLabelLength()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}
void SetLabelLength(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}
BOOL GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}
void SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}


};
